import Mathlib.MeasureTheory.Group.Convolution
import Mathlib.Probability.Moments.MGFAnalytic
import Mathlib.Probability.Independence.Basic
import Mathlib.Analysis.SpecialFunctions.Sqrt
import Mathlib.Probability.Distributions.Gaussian.Basic
import Mathlib.Analysis.SpecialFunctions.Gamma.Basic
import Mathlib.Combinatorics.Enumerative.Catalan
import Mathlib.LinearAlgebra.Matrix.Trace
import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import Mathlib.Probability.HasLaw
import SemicircleLaw.RandomMatrix.RandomMatrix
import Mathlib.Combinatorics.Enumerative.Catalan
import Mathlib.Topology.Filter
import Mathlib.Order.Filter.Defs

import Hammer


/-!
# Wigner Matrices

We define real Wigner random matrices and random matrix ensembles.

## Main definitions

*

## Main results

*
-/

open scoped ENNReal NNReal Real Complex

open MeasureTheory ProbabilityTheory Filter Topology

variable {n : ‚Ñï}
variable (Œº ŒΩ : Measure ‚Ñù) [IsProbabilityMeasure Œº] [IsProbabilityMeasure ŒΩ]
  (hŒº_moments : ‚àÄ (k : ‚Ñï), Integrable (fun x ‚Ü¶ x^k) Œº)
  (hŒΩ_moments : ‚àÄ (k : ‚Ñï), Integrable (fun x ‚Ü¶ x^k) ŒΩ)
  (hŒº_mean : integral Œº id = 0) (hŒΩ_mean : integral ŒΩ id = 0)
  (hŒº_var : integral Œº (fun x ‚Ü¶ x^2) = 1) (hŒΩ_var : integral ŒΩ (fun x ‚Ü¶ x^2) = 1)

instance : MeasurableSpace (Matrix (Fin n) (Fin n) ‚Ñù ) := by
   unfold Matrix; infer_instance

/-- The index set for the strictly upper-triangular entries of an `n x n` matrix. -/
def OffDiagIndex (n : ‚Ñï) := { p : Fin n √ó Fin n // p.1 < p.2 }

instance : Fintype (OffDiagIndex n) := by
  rw[OffDiagIndex]
  infer_instance


/-- The index set for the independent random variables of a Wigner matrix.
This is the disjoint union of indices for the diagonal (`Fin n`) and the
off diagonal (`OffDiagIndex n`) entries. -/
def Index (n : ‚Ñï) := { p : Fin n √ó Fin n // p.1 ‚â§ p.2 }

instance : Fintype (Index n) := by
  rw[Index]
  infer_instance


/-- The sample space for an `n x n` Wigner matrix. It is the product of ‚Ñù over Index n. -/
abbrev WignerSpace (n : ‚Ñï) := Index n ‚Üí ‚Ñù

instance (n : ‚Ñï) : MeasurableSpace (WignerSpace n) := by
  infer_instance

/-- The measure distribution for a Wigner matrix. It assigns the measure `ŒΩ` to diagonal
entries and `Œº` to off-diagonal entries. -/
def wignerMeasureDist (n : ‚Ñï) : Index n ‚Üí Measure ‚Ñù :=
  fun (p : Index n) =>
    if p.val.1 = p.val.2 then ŒΩ
    else Œº


/-- The probability measure on the sample space `WignerSpace n`, which makes the
coordinate projections independent random variables with distributions given by
`wignerMeasureDist`. -/
noncomputable
def WignerMeasure (n : ‚Ñï) : Measure (WignerSpace n) :=
  Measure.pi (wignerMeasureDist Œº ŒΩ n)

instance instIsProbabilityMeasure (n : ‚Ñï) : IsProbabilityMeasure (WignerMeasure Œº ŒΩ n) := by
  rw[WignerMeasure]
  --apply MeasureTheory.Measure.pi.instIsProbabilityMeasure
  sorry

/-- The function that takes an element of WignerSpace (a map (Fin n)‚äï(OffDiagIndex n) ‚Üí ‚Ñù)
to the corresponding function (Fin n) ‚Üí (Fin n) ‚Üí ‚Ñù that respects the symmetric structure of Wigner
matrices.-/
@[grind, simp]
def wignerMatrixEntryFunction (œâ : WignerSpace n) : (Fin n) ‚Üí (Fin n) ‚Üí ‚Ñù :=
  fun i j =>
    if h_eq : i = j then
      œâ (‚ü®(i, i), le_refl i‚ü©)
    else if h_lt : i < j then
      œâ (‚ü®(i, j), le_of_lt h_lt‚ü©)
    else
      have h_gt : j < i := by
         apply lt_of_le_of_ne
         apply le_of_not_gt h_lt
         grind
      œâ (‚ü®(j, i), le_of_lt h_gt‚ü©)


lemma wignerMatrixEntryFunctionSymmetric (œâ : WignerSpace n) {i : Fin n} {j : Fin n} :
  wignerMatrixEntryFunction œâ i j = wignerMatrixEntryFunction œâ j i := by
  rw[wignerMatrixEntryFunction, wignerMatrixEntryFunction]

  sorry

def wignerMatrixMap' (œâ : WignerSpace n) : Matrix (Fin n) (Fin n) ‚Ñù :=
  Matrix.of (wignerMatrixEntryFunction œâ)

/-- A wigner matrix is defined as a matrix valued random variable.-/
noncomputable
def wignerMatrixMap (n : ‚Ñï) : (WignerSpace n) ‚Üí Matrix (Fin n) (Fin n) ‚Ñù :=
  fun (œâ : WignerSpace n) ‚Ü¶ (wignerMatrixMap' œâ)

/-- A wigner matrix is defined as a matrix valued random variable, rescaled by 1/‚àön.-/
noncomputable
def wignerMatrixMapScaled (n : ‚Ñï) : (WignerSpace n) ‚Üí Matrix (Fin n) (Fin n) ‚Ñù :=
  fun (œâ : WignerSpace n) ‚Ü¶ (1 / Real.sqrt (n : ‚Ñù)) ‚Ä¢ (wignerMatrixMap' œâ)

/--For any `(n : ‚Ñï)` the map `wignerMatrixMap` is measurable from `WignerSpace n` to
  `Matrix (Fin n) (Fin n) ‚Ñù`-/
@[fun_prop]
lemma wignerMatrixMapMeasurable (n : ‚Ñï) : Measurable (wignerMatrixMap n) := by
  sorry

/--For any `(n : ‚Ñï)` the map `wignerMatrixMap` is `AEMeasurable` from `WignerSpace n` to
  `Matrix (Fin n) (Fin n) ‚Ñù`-/
@[fun_prop]
lemma wignerMatrixMapAEMeasurable (n : ‚Ñï) : AEMeasurable (wignerMatrixMap n) := by
  fun_prop


/-An `n √ó n` Wigner matrix measure is a measure on `Matrix (Fin n) (Fin n) ‚Ñù` which is given by
the pushworward of `WignerMeasure` by the map `wignerMatrixMap`. -/
noncomputable
def wignerMatrixMeasure (n : ‚Ñï) (Œº ŒΩ : Measure ‚Ñù ) : Measure (Matrix (Fin n) (Fin n) ‚Ñù) :=
  Measure.map (wignerMatrixMap n) (WignerMeasure Œº ŒΩ n)


/- UNDER CONSTRUCTION-/


/-Lemmas that will be useful for working with Wigner Matrices-/

/--The measure `wignerMatrixMeasure` is indeed a `ProbabilityMeasure`.-/
instance (n : ‚Ñï) : IsProbabilityMeasure (wignerMatrixMeasure n Œº ŒΩ) := by
  sorry

/--The diagonal entry of a Wigner Matrix is a measurable function from `WignerSpace` to `‚Ñù`-/
@[fun_prop]
lemma diagonalEntryMeasurable (n : ‚Ñï) (i : Fin n) :
      Measurable (fun œâ ‚Ü¶ (wignerMatrixMap n œâ) i i):= by
  apply measurable_entry
  apply wignerMatrixMapMeasurable

/--The off-diagonal entry of a Wigner Matrix is a measurable function from `WignerSpace` to `‚Ñù`-/
@[fun_prop]
lemma offDiagonalEntryMeasurable (n : ‚Ñï) (i j : Fin n) :
      Measurable (fun œâ ‚Ü¶ (wignerMatrixMap n œâ) i j):= by
  apply measurable_entry
  apply wignerMatrixMapMeasurable

lemma wignerMatrixSymmetric (n : ‚Ñï) ( i j : Fin n) {œâ : WignerSpace n} :
  wignerMatrixMap n œâ i j = wignerMatrixMap n œâ j i := by
  rw[wignerMatrixMap]
  rw[wignerMatrixMap']
  simp
  sorry


/--The diagonal entries of a Wigner Matrix have law ŒΩ -/
lemma diagonalHasLaw (n : ‚Ñï) (i : Fin n) :
    HasLaw (fun œâ ‚Ü¶ (wignerMatrixMap n œâ) i i) ŒΩ (WignerMeasure Œº ŒΩ n) := by
  sorry

/--The upper diagonal entries of a Wigner Matrix have law Œº -/
lemma offDiagonalHasLaw' (n : ‚Ñï) {i j : Fin n} (h : i < j) :
    HasLaw (fun œâ ‚Ü¶ (wignerMatrixMap n œâ) i j) Œº (WignerMeasure Œº ŒΩ n) := by
  sorry

/--The off-diagonal entries of a Wigner Matrix have law Œº -/
lemma offDiagonalHasLaw (n : ‚Ñï) {i j : Fin n} (h : i ‚â† j) :
    HasLaw (fun œâ ‚Ü¶ (wignerMatrixMap n œâ) i j) Œº (WignerMeasure Œº ŒΩ n) := by
  sorry

/-- The map that sends a Wigner Matrix to its kth power is measurable.-/
@[fun_prop]
lemma wignerMatrixPowMeasurable (n : ‚Ñï) (k : ‚Ñï) :
    Measurable (fun œâ ‚Ü¶ ((wignerMatrixMap n œâ)^k)) := by
  apply matrix_measurable_pow
  apply wignerMatrixMapMeasurable


variable {œâ : WignerSpace n}
variable {k : ‚Ñï}
#check ((wignerMatrixMap n œâ)^k).trace

noncomputable
def wignerMatrixTracePower (n : ‚Ñï) (k : ‚Ñï) : (WignerSpace n) ‚Üí ‚Ñù :=
  fun œâ ‚Ü¶ ((wignerMatrixMap n œâ)^k).trace

/-- The map that sends a Wigner Matrix to the trace of its kth power is measurable.-/
@[fun_prop]
lemma wignerMatrixTracePowerMeasurable (n : ‚Ñï) (k : ‚Ñï) :
    Measurable (wignerMatrixTracePower n k) := by
  apply measurable_trace
  apply wignerMatrixPowMeasurable

/--The expectation of the trace of the kth power of a Wigner matrix is equal to 0 when k is odd.-/
theorem wignerMatrixMomentOddExpectation (n : ‚Ñï) (k : ‚Ñï) (hk : Odd k) :
  (WignerMeasure Œº ŒΩ n)[wignerMatrixTracePower n k] = 0 := by
  sorry

/--The sequence of expectations of the trace of the kth power of an n √ó n Wigner matrix.-/
noncomputable
def wignerMatrixTracePowerSequence (k : ‚Ñï) : ‚Ñï ‚Üí ‚Ñù :=
  fun n ‚Ü¶ (WignerMeasure Œº ŒΩ n)[wignerMatrixTracePower n k]


theorem wignerMatrixMomentEvenExpectationLimit (k : ‚Ñï) (hk : Even k) :
  Tendsto (wignerMatrixTracePowerSequence Œº ŒΩ k) atTop (ùìù (catalan (k/2) : ‚Ñù)) := by
  sorry
